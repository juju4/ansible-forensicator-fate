---

## for testing
- name: ensure directory exists
  file: dest={{ ffate_archivesdir }} state=directory mode='0755'

- meta: flush_handlers
- name: ensure jenkins service is started
  service: name=jenkins state=started
- name: Wait for Jenkins to be available before testing.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false

- name: download test files
  get_url:
    url: "{{ item }}"
    dest: "{{ ffate_archivesdir }}/{{ item | basename }}"
    mode: '0644'
    validate_certs: false
  with_items: "{{ ffate_testfiles }}"

- name: uncompress test files
## FIXME! Unable to find '/cases/sources/4-kwsrch-ext3.zip' in expected paths.
#  unarchive:
#    src: "{{ ffate_archivesdir }}/{{ item | basename }}"
#    dest: "{{ ffate_archivesdir }}"
  shell: "unzip -n {{ item | basename }} || bunzip2 {{ item | basename }} chdir={{ ffate_archivesdir }} creates={{ item | basename | regex_replace('.zip$', '') | regex_replace('.bz2$', '') | regex_replace('^10b-', '10-') }}"
  with_items: "{{ ffate_testfiles }}"

## non-impacting error message when using localhost
## 'SEVERE: I/O error in channel CLI connection to http://localhost:8888/'
## use external IP, https://github.com/jenkinsci/docker/issues/164
- name: list jobs with java
  command: "java {{ ffate_jenkins_preargs }} list-jobs {{ ffate_jenkins_args }}"
  changed_when: false
  ignore_errors: true
  become: yes
  become_user: jenkins
  register: listjobs
- debug: var=listjobs
- name: list jobs from shell
  command: "ls {{ jenkins_root }}/jobs"
  register: listjobs2
- debug: var=listjobs2


- name: remove previous jobs' artifacts to avoid conflict
  file: name="/artifacts/{{ item }}" state=absent
  with_items:
    - testdisk-ext3
    - testdisk-hfs
    - testdisk-ntfs
    - testdisk-victoria
    - testmemory-win2k3
    - testmemory-win2k3-rekall
    - testmemory-linux0
    - testmemory-linux0-rekall
    - testmemory-linux
    - testmemory-mac
    - testmemory-mac-rekall
- name: add symlink to used non-standard profile
  file:
    src: /usr/local/share/volatility/profiles/Linux/Debian/x86/Debian5010.zip
    dest: /usr/local/lib/python2.7/dist-packages/volatility/plugins/overlays/linux/Debian5010.zip
    state: link

## needed?
#ln -s /usr/local/share/volatility/profiles/Linux/Debian/x86/Debian5010.zip /usr/lib/python2.7/dist-packages/volatility/plugins/overlays/linux/

- name: ensure jenkins service is started
  service: name=jenkins state=started
- name: Wait for Jenkins to be available before testing.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false

## FIXME? idempotency
## FIXME! sometimes jenkins bug, https://issues.jenkins-ci.org/browse/JENKINS-12543
## workaround with ssh key (need to be added to account)
#$ java -jar /opt/jenkins-cli.jar -s http://localhost:8888/ -i ~/.ssh/id_rsa build findWindowsEvidence -p MEMORY_IMAGE_FILE=/cases/sources/boomer-win2003/boomer-win2003-2006-03-17.img -p CASE_NAME=testmemory-win2k3 -s -v
- name: launch test jobs
  command: "{{ item }}"
  with_items:
    - "java {{ ffate_jenkins_preargs }} build 'findWindowsEvidence' -p DISK_IMAGE_FILE={{ ffate_archivesdir }}/3-kwsrch-ntfs/ntfs-img-kw-1.dd -p CASE_NAME=testdisk-ntfs {{ ffate_jenkins_args }} -s -v"
    - "java {{ ffate_jenkins_preargs }} build 'findLinuxEvidence' -p DISK_IMAGE_FILE={{ ffate_archivesdir }}/4-kwsrch-ext3/ext3-img-kw-1.dd -p CASE_NAME=testdisk-ext3 {{ ffate_jenkins_args }} -s -v"
    - "java {{ ffate_jenkins_preargs }} build 'findLinuxEvidence' -p DISK_IMAGE_FILE={{ ffate_archivesdir }}/victoria-v8.sda1.img -p CASE_NAME=testdisk-victoria {{ ffate_jenkins_args }} -s -v"
    - "java {{ ffate_jenkins_preargs }} build 'findMacEvidence' -p DISK_IMAGE_FILE={{ ffate_archivesdir }}/macwd -p CASE_NAME=testdisk-hfs -p SLEUTHKIT_ARGS=\"-o 64\" -p LOG2TIMELINE_ARGS=\"-o 64\" -p BLKLS_ARGS=\"-o 64\" {{ ffate_jenkins_args }} -s -v"
    - "java {{ ffate_jenkins_preargs }} build 'Volatility' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/boomer-win2003/boomer-win2003-2006-03-17.img -p CASE_NAME=testmemory-win2k3 -p VOLATILITY_PROFILE=Win2003SP0x86 {{ ffate_jenkins_args }} -s -v"
    - "java {{ ffate_jenkins_preargs }} build 'Rekall' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/boomer-win2003/boomer-win2003-2006-03-17.img -p CASE_NAME=testmemory-win2k3-rekall {{ ffate_jenkins_args }} -s -v"
## Invalid Profile Debian5010 ?
#    - "java {{ ffate_jenkins_preargs }} build 'VolatilityLinux' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/victoria-v8.memdump.img -p CASE_NAME=testmemory-linux0 -p VOLATILITY_PROFILE=LinuxDebian5010x86 -p VOLATILITY_ARGS=\"--profile LinuxDebian5010x86 --plugins /usr/local/share/volatility/profiles/Linux/Debian/x86\" {{ ffate_jenkins_args }} -s -v" ## NOK
    - "java {{ ffate_jenkins_preargs }} build 'VolatilityLinux' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/victoria-v8.memdump.img -p CASE_NAME=testmemory-linux0 -p VOLATILITY_PROFILE=LinuxDebian5010x86 {{ ffate_jenkins_args }} -s -v"
## Note: Rekall has no centos profiles in official repository...
    - "rekall convert_profile /usr/local/share/volatility/profiles/Linux/Debian/x86/Debian5010.zip /artifacts/Debian5010x86.json"
    - "java {{ ffate_jenkins_preargs }} build 'RekallLinux' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/victoria-v8.memdump.img -p CASE_NAME=testmemory-linux0-rekall -p REKALL_ARGS=\"-f {{ ffate_archivesdir }}/victoria-v8.memdump.img --profile /artifacts/Debian5010x86.json\" {{ ffate_jenkins_args }} -s -v"
    - "java {{ ffate_jenkins_preargs }} build 'bulk_extractor_memory' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/victoria-v8.memdump.img -p CASE_NAME=testmemory-linux0-bulkextract {{ ffate_jenkins_args }} -s -v"
## Invalid Profile too ?
#    - "java {{ ffate_jenkins_preargs }} build 'VolatilityLinux' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/response_data/challenge.mem -p CASE_NAME=testmemory-linux -p VOLATILITY_PROFILE=LinuxCentOS50x86 -p VOLATILITY_ARGS=\"--profile LinuxCentOS50x86 --plugins /usr/local/share/volatility/profiles/Linux/CentOS/x86\" {{ ffate_jenkins_args }} -s -v"
## (default) ERROR:rekall.1:No profiles match this image. Try specifying manually.
## (convert profile CentOS50/51/510) A DTB value was found but failed to verify. See logging messages for more information.
#    - "rekall convert_profile /usr/local/share/volatility/profiles/Linux/CentOS/x86/CentOS51.zip /artifacts/CentOS51x86.json"
#    - "java {{ ffate_jenkins_preargs }} build 'RekallLinux' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/response_data/challenge.mem -p CASE_NAME=testmemory-linux-rekall -p REKALL_ARGS=\"-f {{ ffate_archivesdir }}/response_data/challenge.mem --profile /artifacts/CentOS51x86.json\" {{ ffate_jenkins_args }} -s -v"
## Mac: miss public sample?
#    - "java {{ ffate_jenkins_preargs }} build 'VolatilityMac' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/?sample -p CASE_NAME=testmemory-mac -p VOLATILITY_PROFILE=MacElCapitan_10_11_6_15G1217x64 -p VOLATILITY_ARGS=\"--plugins /usr/local/share/volatility/profiles/Mac/10.11\" {{ ffate_jenkins_args }} -s -v"
#    - "java {{ ffate_jenkins_preargs }} build 'RekallMac' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/?sample -p CASE_NAME=testmemory-mac-rekall REKALL_ARGS=\"--profile file.json\" {{ ffate_jenkins_args }} -s -v"
## from Art of Memory Forensics, 4GB!!!
#    - "java {{ ffate_jenkins_preargs }} build 'VolatilityLinux' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/linux/linux-sample-1.bin -p CASE_NAME=testmemory-linux -p VOLATILITY_PROFILE=Linuxbookx64 -p VOLATILITY_ARGS=\"--profile Linuxbookx64 --plugins {{ ffate_archivesdir }}/linux\" {{ ffate_jenkins_args }} -s -v"
#    - "java {{ ffate_jenkins_preargs }} build 'RekallLinux' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/linux/linux-sample-1.bin -p CASE_NAME=testmemory-linux2-rekall {{ ffate_jenkins_args }} -s -v"
#    - "java {{ ffate_jenkins_preargs }} build 'RekallMac' -p MEMORY_IMAGE_FILE={{ ffate_archivesdir }}/mac/mac-sample-1.bin -p CASE_NAME=testmemory-mac2-rekall {{ ffate_jenkins_args }} -s -v"
  ignore_errors: true
  become: yes
  become_user: jenkins

## if elk instance, PlasoExporter will trigger and export
## need to recover index reference from PlasoExporter log
#$ http://10.21.181.97:9200/26c86672f2634f1fb6ad00f02c71a1f2/_search?pretty=true&q=*:*
# or browser in http://10.21.181.97:5601/app/kibana#/

